var u=Object.defineProperty;var c=(n,a,e)=>a in n?u(n,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[a]=e;var r=(n,a,e)=>(c(n,typeof a!="symbol"?a+"":a,e),e);class g extends HTMLElement{constructor(){super();r(this,"_slider");r(this,"_rangeMarker");r(this,"_activeClass","is-active");r(this,"handleRangeInput",()=>{this._rangeMarker.classList.add(this._activeClass);const[e,t,s]=this.getRangeValues();this.updateRangeMarker(e,t,s)});r(this,"handleRangeChange",()=>{this._rangeMarker.classList.remove(this._activeClass)});this._slider=this.querySelector('input[type="range"]'),this._rangeMarker=this.querySelector("#range-marker")}connectedCallback(){const[e,t,s]=this.getRangeValues();this.updateRangeMarker(e,t,s),this._slider.addEventListener("input",this.handleRangeInput),this._slider.addEventListener("change",this.handleRangeChange)}updateRangeMarker(e,t,s){const l=this.querySelector("#value");l.innerHTML=this._slider.value;const i=Number((e-t)*100/(s-t)),h=10-i*.2;this._rangeMarker.style.left=`calc(${i}% + (${h}px))`}getRangeValues(){const e=parseInt(this._slider.value),t=parseInt(this._slider.min),s=parseInt(this._slider.max);return[e,t,s]}}export{g as default};
